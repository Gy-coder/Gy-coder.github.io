<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gy的个人网站</title>
    <link>https://gy-coder.xyz/posts/</link>
    <description>Recent content in Posts on Gy的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-Hans</language>
    <lastBuildDate>Fri, 28 Feb 2020 16:12:40 +0800</lastBuildDate>
    
	<atom:link href="https://gy-coder.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>异步与回调</title>
      <link>https://gy-coder.xyz/posts/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%9B%9E%E8%B0%83/</link>
      <pubDate>Fri, 28 Feb 2020 16:12:40 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%9B%9E%E8%B0%83/</guid>
      <description>异步与同步  同步的概念
 能直接拿到结果称之为同步 例如在医院挂号，直到拿到号才会离开，这个过程可能时间很短，也可能时间很长 总之拿不到结果是不会离开的  异步的概念
 不能直接拿到结果称之为异步 例如在餐厅门口等待位置，你可以选择继续等，但是也可以选择先去逛街 那么什么时候可以吃到饭？ 你可以选择每10分钟去一次饭店(轮询) 你也可以选择用微信接收通知(回调)   从ajax看异步  request.send()之后并不会直接得到response 必须等到request.readystate === 4 后，浏览器调用onreadystatechange函数才能得到response 这个过程和在餐厅等餐的过程是类似的  回调的概念  写了却不调用，给别人调用的函数就是回调
 回调的例子
 把函数f1给另一个函数f2
function f1(){} function f2(fn){ fn() } f2(f1)  分析:
 Q:我调用f1没有？ A:没有 Q:我把f1传给别人没有？ A:有，传给了f2 Q:f2调用f1没有？ A:有调用 所以，f1是回调    异步和回调的关系  关联:
 异步任务需要在得到结果时通知js拿结果 可以让js写一个函数地址给浏览器 异步任务完成时浏览器就可以调用这个函数的地址 同时把结果作为参数传递给该函数 这个函数就是写给浏览器调用的，所有称之为回调函数  区别:
 异步函数需要用回调函数来通知结果 但回调函数不一定只用于异步任务，也可以用于同步任务 arr.forEach(n=&amp;gt;console.log(n))就是一个同步回调   如何判断同步异步 如果一个函数的返回值处于</description>
    </item>
    
    <item>
      <title>Ajax简介</title>
      <link>https://gy-coder.xyz/posts/ajax%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 26 Feb 2020 19:35:57 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/ajax%E7%AE%80%E4%BB%8B/</guid>
      <description>ajax是什么？ AJAX即“Asynchronous JavaScript and XML”（非同步的JavaScript与XML技术），指的是一套综合了多项技术的浏览器端网页开发技术。Ajax的概念由杰西·詹姆士·贾瑞特所提出
ajax的功能  ajax的功能就是用JavaScript来发送请求和接收响应
 浏览器在window上加了一个XMLHttpRequest函数
 用这个函数可以构造出一个对象
 JavaScript可以用这个函数来发送请求和接收响应
  ajax的用法  创建一个XMLHttpRequest对象
const request = new XMLHttpRequest()  调用这个对象的open方法
request.open(&#39;GET&#39;,&#39;/style.css&#39;)  监听对象的onreadystatechange事件
request.onreadystatechange = ()=&amp;gt;{ //具体代码 }  调用对象的send方法
request.send()   关于open  open方法接收两个参数
 第一个参数是是请求方式，有GET和POST两种 第二个参数是请求路径   关于onreadystatechange事件  readystate
XMLHttpRequest.readyState属性返回一个XMLHttpRequest代理当前所处的状态。一个XHR代理总是处于下列状态中的一个：
   值 状态 描述     0 unsent 创建XMLHTTPRequest   1 opened open方法调用   2 headers-received send方法已被调用   3 loading 下载中(第一个字符已被下载)   4 done 下载操作完成    status</description>
    </item>
    
    <item>
      <title>JQuery小结</title>
      <link>https://gy-coder.xyz/posts/jquery%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Fri, 31 Jan 2020 18:29:29 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/jquery%E5%B0%8F%E7%BB%93/</guid>
      <description>jQuery简介 jQuery是目前使用最广泛的javascript函数库。
据统计，全世界排名前100万的网站，有46%使用jQuery，远远超过其他库。微软公司甚至把jQuery作为他们的官方库。
用jQuery创建元素 用jQuery创建元素很简单，只要把新元素直接传入jQuery的构造函数就行了
$(&#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&#39;); $(&#39;&amp;lt;li class=&amp;quot;new&amp;quot;&amp;gt;new list item&amp;lt;/li&amp;gt;&#39;);  jQuery选择网页元素 jQuery的基本设计思想和主要用法，就是&amp;rdquo;选择某个网页元素，然后对其进行某种操作&amp;rdquo;。这是它区别于其他Javascript库的根本特点。
使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（简写为$），然后得到被选中的元素。
可以用CSS选择器来选择网页元素
$(&#39;#myId&#39;) //选择ID为myId的网页元素 $(&#39;div.myClass&#39;) // 选择class为myClass的div元素 $(&#39;input[name=first]&#39;) // 选择name属性等于first的input元素  也可以是jQuery特有的表达式
$(&#39;a:first&#39;) //选择网页中第一个a元素 $(&#39;div:animated&#39;) // 选择当前处于动画状态的div元素 $(&#39;div:visible&#39;) //选择可见的div元素  改变结果集 jQuery设计思想之二，就是提供各种强大的过滤器，对结果集进行筛选，缩小选择结果。
$(&#39;div&#39;).has(&#39;p&#39;); // 选择包含p元素的div元素 $(&#39;div&#39;).first(); //选择第1个div元素 $(&#39;div&#39;).eq(5); //选择第6个div元素  有时候，我们需要从结果集出发，移动到附近的相关元素，jQuery也提供了在DOM树上的移动方法：
$(&#39;div&#39;).next(&#39;p&#39;); //选择div元素后面的第一个p元素 $(&#39;div&#39;).parent(); //选择div元素的父元素 $(&#39;div&#39;).children(); //选择div的所有子元素 $(&#39;div&#39;).siblings(); //选择div的同级元素  链式操作 jQuery设计思想之三，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来，比如：
$(&#39;#test&#39;).find(&#39;.class&#39;).addClass(&#39;red&#39;).end()  分解开来就是这样
$(&#39;#test&#39;). //找到id为test的元素 .find(&#39;.class&#39;) //选择test底下类名为class的元素 .addclass(&#39;red&#39;) //为它添加一个名为red的类 .end() //返回到id为test的那个元素  这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。
元素的取值和赋值 操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。</description>
    </item>
    
    <item>
      <title>JQuery设计模式</title>
      <link>https://gy-coder.xyz/posts/jquery%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 31 Jan 2020 16:46:18 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/jquery%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>jQuery简介 jQuery是目前使用最广泛的javascript函数库。
据统计，全世界排名前100万的网站，有46%使用jQuery，远远超过其他库。微软公司甚至把jQuery作为他们的官方库。
jQuery的设计思路  jQuery(选择器)用于获取相应的元素 但它不返回这些元素，而是返回一个对象 这个对象称作为jQuery对象，jQuery对象可以操作相应的元素  jQuery部分实现 window.$ = window.jQuery = function(selectorOrArrayOrTemplate){ let elements //element是个DOM数组 if(typeof selectorOrArrayOrTemplate === &#39;string&#39;){ if(selectorOrArrayOrTemplate[0] === &#39;&amp;lt;&#39;){ // 如果参数是标签字符串就创建DOM对象 elements = [createElement(selectorOrArrayOrTemplate)] }else{ // 如果是选择器就查询 elements = document.querySelectorAll(selectorOrArrayOrTemplate) } }else if(selectorOrArrayOrTemplate instanceof Array){ elements = selectorOrArrayOrTemplate } function createElement(string){ let container = document.createElement(&#39;template&#39;) container.innerHTML = string.trim() return container.content.firstChild } // 以上是初始化elements的内容 const api = Object.create(jQuery.prototype) Object.assign(api,{ elements:elements, oldApi:selectorOrArrayOrTemplate }) // 创建jQuery对象 return api } $.</description>
    </item>
    
    <item>
      <title>Dom操作简介</title>
      <link>https://gy-coder.xyz/posts/dom%E6%93%8D%E4%BD%9C%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 30 Jan 2020 19:16:49 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/dom%E6%93%8D%E4%BD%9C%E7%AE%80%E4%BB%8B/</guid>
      <description>DOM简介 Document Object Model (DOM) 为文档对象模型， 它使用对象的表示方式来表示对应的文档结构及其中的内容。
DOM的结构可以表示成树形结构
通过使用 DOM 提供的 API (Application Program Interface) 可以动态的修改节点（node），也就是对 DOM 树的直接操作。 浏览器中通过使用 JavaScript 来实现对于 DOM 树的改动。
如何用JavaScript获取HTML中的节点  通过标签的一些属性来获取
document.getElementById(&#39;id&#39;) document.getElementsByclassName(&#39;class&#39;)[0] document.getElementsByTagName(&#39;div&#39;)[0] //获取多个节点时 所返回的是伪数组，因此要得到真正的节点需要具体指定  通过CSS选择器来获取
document.querySelector(&#39;#id&#39;) document.querySelectorAll(&#39;.class&#39;)[0] //获取多个节点时 所返回的是伪数组，因此要得到真正的节点需要具体指定   这么多方法我该如何选择？
如果不需要兼容IE直接使用2中的方法，要兼容IE就选择1中的方法
用JavaScript获取特定元素  获取HTML元素
document.documentElement  获取head元素
document.head  获取body元素
document.body  获取窗口(窗口不是元素)
window  获取所有元素
document.all  document.all是继五大falsy值之后的第6个falsy值
  节点的增删改查 节点的创建  创建标签节点
let div = document.createElement(&#39;div&#39;) document.</description>
    </item>
    
    <item>
      <title>作用域和闭包</title>
      <link>https://gy-coder.xyz/posts/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 10 Jan 2020 21:59:43 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</guid>
      <description>作用域 { let a = 1 }  如上述代码所示，一个{}就代表了一个作用域，a变量只能在作用域内访问到
每一个函数都能够创建一个作用域
例如:
function f1(){ let a = 1 } console.log(a) //Uncaught ReferenceError: a is not defined  Q:上述代码中a不存在的原因是否是f1没有执行？
A:即使函数f1执行，a一样不存在
function f1(){ let a = 1 } f1() console.log(a)  Q:打印出多少？
A:a还是不存在，因为无法访问到作用域内的a
全局变量和局部变量  全局变量
 在顶级作用域中声明的变量成为全局变量 在window属性内的都是全局变量  局部变量
 其他都是局部变量    作用域规则  如果有多个作用域中存在同一个变量a
 查找a的声明时，就向上取最近的作用域 查找a的过程与函数的执行无关 但a的值与函数的执行有关  例如
function f1(){ //1.定义f1 let a = 1 //3.</description>
    </item>
    
    <item>
      <title>Js函数的执行时机</title>
      <link>https://gy-coder.xyz/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 10 Jan 2020 20:45:05 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>一些小例子 例1 let a = 1 function fn(){ console.log(a) }  Q:打印多出少？
A:不知道，因为函数没有执行
例2 let a = 1 function fn(){ console.log(a) } fn()  Q:打印多出少？
A:1
例3 let a = 1 function fn(){ console.log(a) } a = 2 fn()  Q:打印多出少？
A:2
例4 let a = 1; function fn(){ console.log(a) } fn() a = 2  Q:打印多出少？
A:1
例5 let a = 1 function fn(){ setTimeout(()=&amp;gt;{ console.log(a) },0) } a = 2 fn()  Q:打印多出少？</description>
    </item>
    
    <item>
      <title>再讨论JavaScript的对象</title>
      <link>https://gy-coder.xyz/posts/%E5%86%8D%E8%AE%A8%E8%AE%BAjavascript%E7%9A%84%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 17 Dec 2019 22:19:27 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/%E5%86%8D%E8%AE%A8%E8%AE%BAjavascript%E7%9A%84%E5%AF%B9%E8%B1%A1/</guid>
      <description>创建一个正方形的小例子 一个正方形有边长，周长，面积，因此我们用一个对象来封装一个正方形
let Square = { width:5, getArea(){ return this.width * this.width }, getLength(){ return this.width * 4 } }  利用这个对象，我们可以创建多个正方形，例如
let square1 = { width:5, getArea(){ return this.width * this.width }, getLength(){ return this.width * 4 } } let square2 = { width:10, getArea(){ return this.width * this.width }, getLength(){ return this.width * 4 } } let square3 = { width:20, getArea(){ return this.width * this.width }, getLength(){ return this.</description>
    </item>
    
    <item>
      <title>JavaScript对象的简单介绍</title>
      <link>https://gy-coder.xyz/posts/javascript%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 09 Dec 2019 22:40:19 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/javascript%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>对象的写法 对象一共有两种写法，具体写法如下
let obj = { &#39;name&#39; : &#39;kim&#39;, &#39;age&#39; : 100 }  let obj = new Object({&#39;name&#39;:&#39;kim&#39;,&#39;age&#39;:100})  关于对象的一些细节
 键名是字符串，不是标识符，可以包含任何字符 引号可以省略，省略后只能写标识符 就算引号省略，键名也是字符串   对象的属性名和属性值  属性名
每一个key都是对象的属性名
 属性值
每一个value都是对象的属性值
 一些奇葩的属性名
let obj = { 1:&#39;a&#39;, 3.2:&#39;b&#39;, 1e2:true, 1e-2:true, .231:false, 0xff:3 }  在Js中，对象的属性名最后都会被转化为字符串，如上代码的数字会转化成一般的10进制数来显示
使用Object.keys(obj)方法可以看到对象的所有关键值，例如
  读取属性  查看对象的所有属性
Object.keys(obj) //查看自己的所有属性 console.dir(obj) //查看自身与共有的属性  如何判断属性的自己的还是共有的？
obj.hasOwnProperty(&#39;属性名&#39;)  原型
 每个对象都有原型  原型存着对象的共有属性 obj的原型的原型就是对象，obj.proto存着这个对象的地址 这个对象里有toString/constructor/valueOf等属性  对象的原型也是对象  对象的原型也有原型 obj = {}的原型为所有对象的原型，这个原型包含所有对象的共有属性，是对象的根 这个根也有原型，是null     查看属性</description>
    </item>
    
    <item>
      <title>JavaScript的基本数据类型</title>
      <link>https://gy-coder.xyz/posts/javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 09 Dec 2019 20:30:58 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>JavaScript的七种数据类型  数字类型 number 字符串类型 String 布尔类型 bool 符号 Symbol 空 undefined 空 null 对象 Object  JavaScript的数据类型可以总结为四基(数字、字符串、布尔、符号)两空(undefined、null)一对象(Object)
数据类型的详细介绍  数字类型number
 写法
1 //整数写法 0.1 //浮点数写法 1.23e4 //科学计数法，值为1.23 * (10^4) 0123 00123 0o123 //八进制写法 0xF1F //十六进制写法 0b1011 //二进制写法  特殊值
 正0与负0:在一般情况下二者没有区别，但是在除0时，正负就出现作用了，如果是正0，则除法结果是正无穷，如果是负0，则除法的结果为负无穷
1/0 //结果为+Infinity 1/-0 //结果为-Infinity  无穷大:有 +Infinity 和 -Infinity 之分
  NaN:
 NaN是指我们无法用现有的数学内容所表示出来的数字，他也是数字的一种 关于NaN的一些注意事项  从bool逻辑上讲，NaN为false 从等于上讲NaN不等于任何东西 包括他本身(NaN === NaN的返回值为false)    字符串类型String</description>
    </item>
    
    <item>
      <title>JavaScript基础语法</title>
      <link>https://gy-coder.xyz/posts/javascript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 05 Dec 2019 21:22:40 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/javascript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>表达式和语句  表达式
如下的代码我们称之为表达式
1 + 2 //表达式的值为3 add(1,2) //表达式的值为函数的返回值 console.log //返回值为函数本身 console.log(3) //返回值为Undefined  语句
如下的代码我们称之为语句
var a = 1;  表达式和语句的区别
 表达式一般都有值，语句可能有也可能没有 语句一般会改变环境(声明、赋值)   注：这种区别不是绝对的
标识符  规则
 第一个字符可以是Unicode字符或$或_或中文 后面的字符，除上面所说，还可以是数字  变量名也是标识符
var _ = 1; var $ = 2; var 你好 = ‘hi’; var _____ = 6;   JavaScript语句  if语句
 语法
if(表达式){ 语句; }else{ 语句; }  注:{}在语句仅有一句时可以省略 But 非常不建议这样做</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://gy-coder.xyz/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Thu, 05 Dec 2019 20:24:53 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/javascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript 的简介 JavaScript（通常缩写为 JS）是一种高级的、解释型的编程语言。JavaScript 是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持 I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由 ECMA（欧洲电脑制造商协会）通过 ECMAScript 实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。
在客户端，JavaScript 在传统意义上被实现为一种解释语言，但在最近，它已经可以被即时编译（JIT）执行。随着最新的 HTML5 和 CSS3 语言标准的推行它还可用于游戏、桌面和移动应用程序的开发和在服务器端网络环境运行，如 Node.js。
JavaScript 与 Java 的关系 JavaScript 与 Java 这门语言不管是在名字上，或是在语法上都有很多相似性，但这两门编程语言从设计之初就有很大的不同，JavaScript 的语言设计主要受到了 Self（一种基于原型的编程语言）和 Scheme（一门函数式编程语言）的影响。在语法结构上它又与 C 语言有很多相似（例如 if 条件语句、switch 语句、while 循环、do-while 循环等）。
JavaScript 的历史  肇始于网景:
1993 年，伊利诺伊大学厄巴纳-尚佩恩分校的国家超级电脑应用中心（NCSA）发表了 NCSA Mosaic，这是最早流行的图形接口网页浏览器，它在万维网的普及上发挥了重要作用。1994 年，一家名为 Mosaic Communications 的公司在加州芒廷维尤成立了，并雇用了许多原来的 NCSA Mosaic 开发者用来开发 Mosaic Netscape，该公司的目标是取代 NCSA Mosaic 成为世界第一的网页浏览器。第一个版本的网页浏览器 Mosaic Netscape 0.9 于 1994 年底发布。在四个月内，已经占据了四分之三的浏览器市场，并成为 1990 年代互联网的主要浏览器。为避免 NCSA 的商标所有权问题，该浏览器于同年更名为 Netscape Navigator，该公司命名为 Netscape Communications。网景预见到网络需要变得更动态。公司的创始人马克·安德森认为 HTML 需要一种胶水语言，让网页设计师和兼职程序员可以很容易地使用它来组装图片和插件之类的组件，且代码可以直接编写在网页标记中。</description>
    </item>
    
    <item>
      <title>浅谈url</title>
      <link>https://gy-coder.xyz/posts/%E6%B5%85%E8%B0%88url/</link>
      <pubDate>Sat, 30 Nov 2019 20:51:16 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/%E6%B5%85%E8%B0%88url/</guid>
      <description> URL的基础知识  url的简介:
统一资源定位系统（uniform resource locator;URL）是因特网的万维网服务程序上用于指定信息位置的表示方法。它最初是由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738。
 url的组成:
url一般由协议 + 域名 + 路径 + 查询参数 + 锚点组成
 例子:
在http://www.baidu.com/s?wd=hello&amp;amp;rsv_spt=1#5中
 https代表协议 www.baidu.com代表域名 s?代表路径 wd=hello&amp;amp;rsv_spt=1代表查询参数 #5代表锚点   </description>
    </item>
    
    <item>
      <title>CSS动画及浏览器渲染原理</title>
      <link>https://gy-coder.xyz/posts/css%E5%8A%A8%E7%94%BB%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 27 Nov 2019 18:41:55 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/css%E5%8A%A8%E7%94%BB%E5%8F%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</guid>
      <description>浏览器的渲染原理  浏览器的渲染过程：
 根据 HTML 建立 HTML 树(DOM) 根据 CSS 建立 CSS 树(CSSOM) 将两课树合并成一颗渲染树 Layout 布局(文档流，盒模型，计算大小和位置) paint 绘制(把边框颜色，文字颜色，阴影等画出来) compose 合成(根据层叠关系展示画面)
  三种更新方式:
 JavaScript &amp;ndash;&amp;gt; Style &amp;ndash;&amp;gt; Layout &amp;ndash;&amp;gt; Paint &amp;ndash;&amp;gt; composite
例:div.remove()会使当前元素消失，其他元素 relayout
 JavaScript &amp;ndash;&amp;gt; Style &amp;ndash;&amp;gt; Paint &amp;ndash;&amp;gt; composite
例:改变 background，直接 repaint + composite
 JavaScript &amp;ndash;&amp;gt; Style &amp;ndash;&amp;gt; composite
例:改变 transform，只需 composite
   CSS 动画优化 CSS 动画优化的方式有很多，本文主要讲解两个方面，如果您想了解完全可以参考该链接
 Js 优化:
使用 requestAnimationFrame 代替 SetInterVal 和 setTimeOut</description>
    </item>
    
    <item>
      <title>CSS之grid布局</title>
      <link>https://gy-coder.xyz/posts/css%E4%B9%8Bgrid%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 27 Nov 2019 16:05:56 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/css%E4%B9%8Bgrid%E5%B8%83%E5%B1%80/</guid>
      <description>grid 布局简介 grid 布局是 CSS 一种功能强大的布局方案，常用于二维布局
grid 的布局结构 和 flex 布局一样，grid 布局也分为容器部分(container)和容器内元素部分(items)
如何使用 grid 布局？ 使用 grid 布局比较简单，只需要在 CSS 中声明容器是 grid 容器就可以使用 grid 布局
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .container{ display:grid/inline-grid; }  划分 grid 容器 grid-template-rows 属性用于划分网格行
grid-template-columns 属性用于划分网格列
属性的取值可以是非负数长度，可以是百分数，也可以是 fr
fr 是将空间按照份数成比例划分
.container{ grid-template-rows:25% 100px auto; grid-template-columns:40px 50px auto 50px 40px; }  如何为 items 选定范围？ 只需要确定构成 item 范围的四根线则可以确定 item 的范围，通过以下四个属性则可以确定
 grid-column-start grid-column-end grid-row-start grid-row-end
.items:nth-child(x){ grid-column-start:2; grid-column-end:5; grid-row-start:1; grid-row-end:3; }   划分例子 &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  .</description>
    </item>
    
    <item>
      <title>CSS之flex布局</title>
      <link>https://gy-coder.xyz/posts/css%E4%B9%8Bflex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 24 Nov 2019 17:50:23 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/css%E4%B9%8Bflex%E5%B8%83%E5%B1%80/</guid>
      <description>什么是 flex 布局？ flex 是 Flexible Box 的缩写，意为&amp;rdquo;弹性布局&amp;rdquo;，是 CSS 布局的方式之一，flex 布局已经支持大多数浏览器
flex 布局的结构 Flex 布局由容器 container 和容器内的元素 items 构成
如何使用 flex 布局？ 使用 flex 布局比较简单，只需要在 CSS 中声明容器是 flex 容器就可以使用 flex 布局
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;  .container{ display:flex/inline-flex; }  容器的样式  items 的流动方式(主轴方向):
.container{ flex-direction:row/row-reverse/column/column-reverse }  一个小 bug: 当 items 过多的时候不会另起一行，而是会挤压，items 会变小
 items 换行:
.container{ flex-wrap:nowrap/wrap/wrap-reverse; }  nowrap 是默认值，不换行
 主轴对齐方式:
.container{ justify-content:flex-start/flex-end/center/space-between/space-around/space-evenly; }  默认主轴是横轴
 次轴对齐:</description>
    </item>
    
    <item>
      <title>CSS之float布局</title>
      <link>https://gy-coder.xyz/posts/css%E4%B9%8Bfloat%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 24 Nov 2019 12:07:00 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/css%E4%B9%8Bfloat%E5%B8%83%E5%B1%80/</guid>
      <description>Float 布局简介 Float 布局是一种经典的布局方式，对 IE 浏览器可以做到很好的兼容，在兼容 IE6/7 时，首选 Float 布局
Float 布局的步骤  子元素上加 float:left/right 在父元素上加 class=“clearfix” (重要)
.clearfix::after{ content:&amp;quot;&amp;quot;; display:block; clear:both; }   Float 布局的经验  留一些空间或最后一个不设 width 无需考虑响应式(IE6/7 不存在移动端) IE6/7 存在双倍 margin 的 bug，解决方式有两种:  将错就错，针对 IE6/7 把 margin 减半 加上 display:inline-block   Float 不同布局  float 两栏布局:用于顶部条 float 三栏布局:用于内容区 float 四栏布局:导航条 float 平均布局:产品展示区  在 Float 布局过程中的注意事项  如果发现图片下有多余的东西，则在图片的 CSS 属性中加 vertical-align:top/middle border 因为会占据像素可能会对布局产生干扰，可以改用 outline 有 width 的块级元素水平居中的方式</description>
    </item>
    
    <item>
      <title>CSS盒模型</title>
      <link>https://gy-coder.xyz/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 20 Nov 2019 16:10:34 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>CSS盒模型 盒模型是CSS的重点之一，也是难点之一
CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。
盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。
当我们在浏览器中按下F12 就可以看到元素的盒模型
 盒模型基本元素:
 宽度:width 高度height 边距:margin 边框:border 内边距:padding(一个元素的内容和其边界之间的空间) 内容区content  盒模型的分类:
盒模型分为content-box和border-box两种
在声明时用box-sizing:content-box/border-box来声明
 content-box:
content-box是指内容盒，内容就是盒子的边界
在content-box中
width = 内容的宽度
盒子的大小 = border + padding + 内容的宽度
 border-box:
border-box是指边框盒，边框才是盒子的边界
在border-box中
width = border + padding + 内容区
盒子的大小 = width
  用实际体会一下两者的不同:
&amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;content-box&amp;quot;&amp;gt;内容盒&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;border-box&amp;quot;&amp;gt;边框盒&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt;  .content-box{ margin: 10px; padding:20px; border:5px solid red; box-sizing:content-box; width: 100px; } .border-box{ margin: 10px; padding:20px; border:5px solid green; box-sizing:border-box; width: 100px; }  在这两种不同的盒模型中，div的显示效果如图</description>
    </item>
    
    <item>
      <title>HTML重难点标签</title>
      <link>https://gy-coder.xyz/posts/html%E9%87%8D%E9%9A%BE%E7%82%B9%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 16 Nov 2019 15:23:52 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/html%E9%87%8D%E9%9A%BE%E7%82%B9%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML重难点标签 a标签  作用:
 跳转到外部页面 跳转到内部锚点 跳转到邮箱或者电话号码等  属性:
 href属性:
 用途:在内部写入跳转地址 href的取值
 网址:
 http://baidu.com https://google.com //google.com  路径:
 /a/b/c a/b/c  伪协议:
 javascript伪协议:
javascript:(代码);
应用在使a标签实现点击后不跳转不刷新上
&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;查看&amp;lt;/a&amp;gt;  邮箱：点击后发送邮件给冒号后的地址
mailto:(邮箱名)
 电话号:点击后打电话给冒号后的号码
tel:电话号
  id:用于内部跳转
href=#xxx
   target属性:
 属性内容:
 _black :在新的页面打开 _self : 在单签页面打开 _top: 在顶级窗口打开 _parent : 在单签页面上一层的iframe打开   程序员命名:
如果没有程序员自命的target属性值，则新开一个名为target属性值的窗口，否则会在target属性值的窗口中跳转
    table标签  table内写的标签</description>
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>https://gy-coder.xyz/posts/html%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 15 Nov 2019 22:18:26 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/html%E5%85%A5%E9%97%A8/</guid>
      <description>HTML 入门 HTML 的由来: HTML 是由蒂姆·伯纳斯－李(Tim Berners-Lee 创建)
HTML 的起手: 在 Vscode 中创建 html 文件后，在英文状态下输入!后按 tab 键就会生成 html 的基本结构
HTML 基本结构的含义:  &amp;lt;!DOCTYPE html&amp;gt;
告诉浏览器文档类型是 html
 &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
告诉浏览器页面的语言是英语，可以改为 zh-CN，网页的语言就是中文。在浏览器的翻译功能中，就是依赖该字段去翻译。
 &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
告诉浏览器文件的字符编码是 UTF-8
 &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
禁用缩放，兼容手机
 &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;
告诉 IE 浏览器使用最新的内核
 &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
该页面的标题为 Document,用户可修改
  章节标签  标题标签 h1&amp;ndash;h6:
&amp;lt;h1&amp;gt;标题1&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;标题2&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;标题3&amp;lt;/h3&amp;gt; &amp;lt;h4&amp;gt;标题4&amp;lt;/h4&amp;gt; &amp;lt;h5&amp;gt;标题5&amp;lt;/h5&amp;gt; &amp;lt;h6&amp;gt;标题6&amp;lt;/h6&amp;gt;  章节标签:</description>
    </item>
    
    <item>
      <title>Git命令入门</title>
      <link>https://gy-coder.xyz/posts/git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 12 Nov 2019 20:40:01 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</guid>
      <description>命令基础 命令是计算机编程学习者所具备的基本功之一，下面我们就来简单的讨论一下命令以及所需要的知识点 命令所需要的英语词汇: 为了加深对命令内容的理解，我们简单的介绍一些涉及命令的基本词汇。  file &amp;ndash;&amp;gt; 文件 remove &amp;ndash;&amp;gt; 删除 recursive &amp;ndash;&amp;gt; 递归的 make &amp;ndash;&amp;gt; 制作 copy &amp;ndash;&amp;gt; 拷贝 link &amp;ndash;&amp;gt; 链接 move &amp;ndash;&amp;gt; 移动 list &amp;ndash;&amp;gt; 列表 echo &amp;ndash;&amp;gt; 回声 touch &amp;ndash;&amp;gt; 触摸 change &amp;ndash;&amp;gt; 改变 directory &amp;ndash;&amp;gt; 目录 force &amp;ndash;&amp;gt; 强制  命令的缩写:
 file &amp;ndash; 无 remove &amp;ndash; rm recursive &amp;ndash; 无 make &amp;ndash; mk copy &amp;ndash; cp link &amp;ndash;ls move &amp;ndash; mv list &amp;ndash; ls echo &amp;ndash; echo touch &amp;ndash; touch change &amp;ndash; cd 中的 c directory &amp;ndash; cd 中的 d force &amp;ndash; f  用命令对文件进行增删改查的操作:  查看文件与目录:</description>
    </item>
    
    <item>
      <title>如何用hugo搭建个人博客</title>
      <link>https://gy-coder.xyz/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 10 Nov 2019 16:59:37 +0800</pubDate>
      
      <guid>https://gy-coder.xyz/posts/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>安装  在Mac上 在Mac上安装hugo非常方便，仅需要两个命令就可以完成
brew install hugo  验证hugo的安装是否成功
hugo version  在Windows上
 去Hugo release页面下载hugo_xxx_Windows-64bit.zip 解压，把hugo.exe放到D:\Software\hugo\hugo.exe 把D:\Software\hugo\加到PATH中 重启终端，运行hugo version查看版本    快速搭建博客  进入Hugo官网，点击Quick Start 从Step 2到Step 7按照网页上的内容依次操作 操作完毕后会得到一个public目录，这就是我们的博客站点 创建.gitignore文件，在文件内写入/public/
(注：讲public与hugo的内容分离，上传到两个分支) 进入目录操作 (注：将public上传到本地的git仓库)
 cd public(进入public目录中) git init git add . git commit   在GitHub中创建一个仓库，名为(用户名).github.io
 例如：Gy-coder.github.io  远程提交: (注：确保cd的是public，因为只上传public到.github.io仓库中)
 git remote add origin (你的SSH地址)
 git push -u origin master
  点击 setting，找到GitHub Pages，然后点击链接就可以看到blog的内容了</description>
    </item>
    
  </channel>
</rss>